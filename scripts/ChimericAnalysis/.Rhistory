fisher.test(rbind(c(1,9),c(11,3)), alternative="less")$p.value
fisher.test
?fisher.test
fisher.test
?fisher.test
help(fisher.test)
fisher.test(rbind(c(1,9),c(11,3)), alternative="less")
TEST = rbind(c(1,9), c(11,3))
TEST
fisher.test(rbind(c(1,9),c(11,3)), alternative="less")
fisher.test(rbind(c(0,10),c(12,2)), alternative="less")
TEST
TEST = rbind(c(0,9), c(12,0))
TEST
fisher.test(TEST)
TEST = rbind(c(3,6), c(11,1))
fisher.test(TEST)
fisher.test( rbind( c(0,12), c(0,9) )
)
fisher.test( rbind( c(0,12), c(0,9) ))
fisher.test( rbind( c(1,12), c(1,9) ))
fisher.test( rbind( c(3,7), c(4,6) ))
fisher.test( rbind( c(3,7), c(4,6) ))$or
fisher.test( rbind( c(3,7), c(4,6) ))
fisher.test( rbind( c(2,10), c(0,9) ))
fisher.test( rbind( c(3,10), c(0,9) ))
fisher.test( rbind( c(4,6), c(0,9) ))
fisher.test( rbind( c(4,6), c(0,9)),alternative = "less")
fisher.test( rbind( c(4,6), c(1,8)),alternative = "less")
fisher.test( rbind( c(4,6), c(1,8)),alternative = "more")
fisher.test( rbind( c(4,6), c(1,8)),alternative = "greater")
ls
fisher.test( rbind( c(4,6), c(1,8)),alternative = "greater")
fisher.test( rbind( c(4,6), c(1,8)),alternative = "greater")$estimate
fisher.test( rbind( c(2,8), c(1,9)),alternative = "greater")
fisher.test( rbind( c(2,8), c(0,9)),alternative = "greater")
fisher.test( rbind( c(3,7), c(0,9)),alternative = "greater")
fisher.test( rbind( c(3,7), c(0,10)),alternative = "greater")
fisher.test( rbind( c(4,6), c(0,10)),alternative = "greater")
fisher.test( rbind( c(4,6), c(1,9)),alternative = "greater")
fisher.test( rbind( c(5,5), c(1,9)),alternative = "greater")
X = 20
Y = 15
X
Y
for seq(1:X)
for seq(X)
sequence(X)
for (ITERATION in sequence(X)){ print(ITERATION)}
fisher.test(5,1)
fisher.test(c(5,1),c(5,2))
fisher.test(c(5,1),c(0,7))
fisher.test(c(5,1),c(1,7))
fisher.test(c(5,1),c(1,7),alternative = "greater")
for (ITERATION in sequence(X)) {
X_positive = ITERATION
X_negative = X - ITERATION
print(X_positive)
print(X_negative)
}
sequence(3)
sequence(0)
sequence(X + 1)
sequence(X + 1) -1
for (ITERATION in (sequence(X + 1) - 0) {
X_positive = ITERATION
X_negative = X - ITERATION
print(X_positive)
print(X_negative)
}
for (ITERATION in (sequence(X + 1) - 0) {
X_positive = ITERATION
X_negative = X - ITERATION
print(X_positive)
print(X_negative)
}
for (ITERATION in (sequence(X + 1) - 1) {
X_positive = ITERATION
X_negative = X - ITERATION
print(X_positive)
print(X_negative)
}
for (ITERATION in (sequence(X+1)-1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
print(X_positive)
print(X_negative)
}
for (ITERATION in (sequence(X+1)-1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1)-1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
print(X_positive,X_negative,Y_positive,Y_negative)
}
}
for (ITERATION in (sequence(X+1)-1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1)-1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
print(c(X_positive,X_negative,Y_positive,Y_negative))
}
}
for (ITERATION in (sequence(X+1)-1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1)-1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvec = c(X_positive, X_negative)
Yvec = c(Y_positive, Y_negative)
fisher.test(Xvec,Yvec, alterantive = 'greater')$p.value
}
}
for (ITERATION in (sequence(X+1)-1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1)-1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvec = c(X_positive, X_negative)
Yvec = c(Y_positive, Y_negative)
fisher.test(Xvec,Yvec, alternative = 'greater')$p.value
}
}
print(Xvec,Yvec)
print(Xvec)
print(c(Xvec,Yvec))
fisher.test(Xvec,Yvec, alternative = 'greater')$p.value
fisher.test(Xvec)
fisher.test(Xvec, Yvec)
X
Xvec
Yvec
fisher.test(Xvec, Yvec)
fisher.test(10,20)
fisher.test(c(10,9),c(20,5)
)
fisher.test(c(X_positive, X_negative), c(Y_positive, Y_negative), alternative = 'greater')$p.value
X_positive
Y_negative
c(X_positive, X_negative)
c(Y_positive, Y_negative)
fisher.test(x = c(X_positive, X_negative),
y = c(Y_positive, Y_negative),
alternative = 'greater')
x = c(X_positive, X_negative)
x
y = c(Y_positive, Y_negative)
y
fisher(x, y)
fisher.test(x, y)
fisher.test(numeric(x), y)
fisher.test(numeric(x), numeric(y))
numeric(x)
as.numeric(x)
fisher.test(as.numeric(x),as.numeric(x))
fisher.test(c(3,3),c(5,5))
fisher.test( c(3,3),c(5,5) )
fisher.test( c(3,3), c(5,5) )
fisher.test(c(10,9),c(20,5)
)
fisher.test( c(10,9), c(20,5)
)
fisher.test( c(10,9), c(20,5))
fisher.test( c(10,9), c(20,5))
fisher.test( c(X_positive, X_negative), c(20,5))
X_positive
X_negative
type(c(20,5))
class(c(20,5))
class(x)
x
x
fisher.test( x, c(20,5))
fisher.test( c(20,5),
c(20,5))
fisher.test( x = c(20,5),
y = c(20,5))
fisher.test( x = c(20,5),
y = c(20,5),
alternative = 'greater')
X
Y
INTERATION2
Y_positive
class(Y_positive)
fisher.test( x = c(Y_positive,5),
y = c(20,5),
alternative = 'greater')
fisher.test( x = c(Y_positive,Y_negative),
y = c(20,5),
alternative = 'greater')
fisher.test( x = c(X_positive, X_negative),
y = c(Y_positive,Y_negative),
alternative = 'greater')
X_positive
fisher.test( x = c(Y_positive,Y_negative),
y = c(20,5),
alternative = 'greater')
fisher.test( x = c(20,5),
y = c(Y_positive,Y_negative),
alternative = 'greater')
fisher.test( x = c(X_positive,5),
y = c(Y_positive,Y_negative),
alternative = 'greater')
fisher.test( x = c(X_positive,X_negative),
y = c(Y_positive,Y_negative),
alternative = 'greater')
fisher.test( x = c(X_positive,5),
y = c(Y_positive,Y_negative),
alternative = 'greater')
class(X_negative)
X
fisher.test( x = c(X_positive,X_negative),
y = c(Y_positive,Y_negative),
alternative = 'greater')
X_negative
class(X_negative)
X_negative = 3
fisher.test( x = c(X_positive,X_negative),
y = c(Y_positive,Y_negative),
alternative = 'greater')
fisher.test( c(3,2), c(24,5) )
fisher.test( c(3,0), c(24,5) )
fisher.test( c(3,0), c(24,0) )
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
fisher.test( x = c(X_positive,X_negative),
y = c(Y_positive,Y_negative),
alternative = 'greater')
}
}
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
Xvector
Yvector
fisher.test( x = Xvector,
y = Yvector,
alternative = 'greater')
}
}
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
print(Xvector)
print(Yvector)
fisher.test( x = Xvector,
y = Yvector,
alternative = 'greater')
}
}
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
print(c(Xvector, Yvector))
fisher.test( x = Xvector,
y = Yvector,
alternative = 'greater')
}
}
fisher.test( c(10,10), c(0,15))
fisher.test( c(10,10), c(3,15))
fisher.test( c(10,11), c(3,15))
fisher.test( c(10,10), c(3,15))
fisher.test( c(10,10), c(15,15))
fisher.test( c(10,3), c(15,15))
fisher.test( c(10,3), c(13,15))
fisher.test( c(10,3), c(13,15))
c(10,10)
fisher.test( c(3,3), c(13,15))
fisher.test( c(3,3), c(13,15))
rbind(c(3,3), c(13,15))
fisher.test(rbind(c(3,3), c(13,15)))
fisher.test( rbind( Xvector, Yvector)
alternative = 'greater')
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
}
}
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
print(c(Xvector, Yvector))
fisher.test( rbind( Xvector, Yvector),
alternative = 'greater')
}
}
X =
hi
VALUE
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
VALUE =
fisher.test( rbind(c(X_positive,X_negative),
c(Y_positive,Y_negative)  ),
alternative = 'greater')$p.value
}
}
VALUE
VALUE = cbind(VALUE,X)
VALUE
VALUE = cbind(VALUE,X)
VALUE = cbind(VALUE,X)
VALUE
w8t = c()
w8t
w8t = cbind(w8t,4)
w8t
w8t = cbind(w8t,4)
w8t = cbind(w8t,4)
w8t
VALUE = c()
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION
X_negative = X - ITERATION
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
VALUE = cbind( VALUE,
fisher.test( rbind(c(X_positive,X_negative),
c(Y_positive,Y_negative)  ),
alternative = 'greater')$p.value)
}
}
VALUE
X
Y
matrix( VALUE, nrow = X)
MAT = matrix( VALUE, nrow = X)
View(MAT)
MAT = matrix( VALUE, nrow = X + 1)
View(MAT)
MAT = matrix( VALUE, nrow = Y + 1)
View(MAT)
fisher.test(c(0,20), c(0,15))$p.value
fisher.test(c(20,0), c(0,15))$p.value
fisher.test(c(20,0), c(15,0))$p.value
fisher.test(c(0,20), c(0,15))$p.value
MAT = matrix(VALUE,nrow = X, byrow = T)
MAT = matrix(VALUE,nrow = X + 1, byrow = T)
View(MAT)
fisher.test(c(1,19), c(0,15))$p.value
fisher.test(c(2,18), c(0,15))$p.value
fisher.test(c(3,17), c(0,15))$p.value
fisher.test(c(3,17), c(3,15))$p.value
fisher.test(c(3,17), c(3,12))$p.value
fisher.test(c(9,11), c(0,15))$p.value
fisher.test(c(9,11), c(0,15))
fisher.test(c(9,11), c(1,14))$p.value
fisher.test(c(9,11), c(1,14))
fisher.test(c(9,11), c(1,14)alternative = 'two.sided')
fisher.test(c(9,11), c(1,14), alternative = 'two.sided')
fisher.test(c(9,11), c(1,14))
fisher.test(c(4,16), c(2,13))
fisher.test(c(4,1), c(2,13))
fisher.test(c(4,1), c(2,1))
VALUE = c()
for (ITERATION in (sequence(X+1) - 1) ) {
X_positive = ITERATION # start at zero positive
X_negative = X - ITERATION # and all are negative
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
VALUE = cbind( VALUE,
fisher.test( rbind(c(X_positive,X_negative),
c(Y_positive,Y_negative)  ),
alternative = 'greater')$p.value)
} }
MAT = matrix(VALUE, nrow = X + 1, byrow = T, ncol = Y + 1)
View(MAT)
fisher.test(x = c(20,0), y = c(3,12))
MAT
fisher.test( rbind(c(5,3), c(5,3)), alternative = 'greater')
fisher.test( rbind(c(5,3), c(5,3)), alternative = 'greater')$p.value
fisher.test( rbind(c(5,3), c(5,3)), alternative = 'greater')$p.value
X
Y
fisher.test( rbind(c(3,17), c(5,10)), alternative = 'greater')$p.value
fisher.test( rbind(c(3,17), c(5,10)), alternative = 'greater')$p.value
VALUE[3,5]
VALUE[3,]
VALUE[5,3]
MAT[5,3]
MAT[3,5]
MAT[6,10]
fisher.test( rbind(c(6,14), c(10,5)), alternative = 'greater')$p.value
fisher.test( rbind(c(3,17), c(10,5)), alternative = 'greater')$p.value
fisher.test( rbind(c(3,17), c(2,13)), alternative = 'greater')$p.value
fisher.test( rbind(c(12,8), c(2,13)), alternative = 'greater')$p.value
MAT[13,3]
MAT = matrix(VALUE, nrow = X + 1, byrow = T, ncol = Y + 1)
MAT[13,3]
# Fisher's Exact Test (Odds Ratio Test)
Fishers.Matrix = function(X,Y){
VALUE = c() #initialize p-value output vector
for (ITERATION in (sequence(X + 1) - 1) ) {
X_positive = ITERATION # start at zero positive
X_negative = X - ITERATION # and all are negative
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
VALUE = cbind( VALUE,
fisher.test( rbind(c(X_positive,X_negative),
c(Y_positive,Y_negative)  ),
alternative = 'greater')$p.value)
} }
MAT = matrix(VALUE, nrow = X + 1, byrow = T, ncol = Y + 1)
return(MAT)
}
Fishers.Matrix = function(X,Y){
VALUE = c() #initialize p-value output vector
for (ITERATION in (sequence(X + 1) - 1) ) {
X_positive = ITERATION # start at zero positive
X_negative = X - ITERATION # and all are negative
for (ITERATION2 in (sequence(Y+1) - 1) ) {
Y_positive = ITERATION2
Y_negative = Y - ITERATION2
Xvector = c(X_positive,X_negative)
Yvector = c(Y_positive,Y_negative)
VALUE = cbind( VALUE,
fisher.test( rbind(c(X_positive,X_negative),
c(Y_positive,Y_negative)  ),
alternative = 'greater')$p.value)
} }
MAT = matrix(VALUE, nrow = X + 1, byrow = T, ncol = Y + 1)
return(MAT)
}
Output = Fishers.Matrix(12,9)
View(Output)
Output[6,1]
which(Output < 0.05)
X = Output < 0.05
View(X)
